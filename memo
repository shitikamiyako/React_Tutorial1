それぞれのクラスで状態を管理する。

ex. チュートリアルの場合

Squareクラスはマス単位の状態
Boardクラスは盤面全体の状態(=Squqreクラスに対して親の関係になる)
GameクラスはさらにBoardに対して上位の関係になる

つまり
Game→Board→Squareという流れでデータの受け渡しがなされている。

propsはコンポーネント(クラス)に対する引数のこと。
チュートリアルにおいては各マス目に渡される値がパスされる。
stateはコンポーネント内での値の保持のあれこれを記憶していく領域のこと。
チュートリアルにおいてはクリックするとマスの状態が変化する処理においてこれが利用されている。

つまり

1. Gameコンポーネントでマスに対してのイベントが設定され、それに伴い値も定義される
2. Boardコンポーネントに1で定義されたstateがパスされる、さらにここではマスをどれだけ増やすかが定義される。
3. 2がパスされ最終的にpropsとしてSquareコンポーネントで受け取られて処理が実行される

という過程を踏んでいく。
細かく言うと、stateはプライベートの扱いになるので、コンポーネントの外からは変更できない。
よって、stateの変更処理(今回はhandleClick関数)をパスしていき、最終的にpropsに渡った時点で処理を呼び出すという形になる。
このような書き方をstateのリフトアップといって、実際のコーディングとしては上記の処理順とは逆順で以下のように書いていく

1. 親子関係になるコンポーネントにおいてはまず、子コンポーネントに対して、stateとprops、及びstateの変更処理を定義する
2. 実装とテストを行い問題なく処理が通るか確認をする。
3. stateとstateの変更処理を上位コンポーネントにリフトアップする
4. 子コンポーネントのpropsに、3をパスするような処理を書く
5. 4でパスされたものを使った子コンポーネント側の変更結果を親コンポーネントのstateに格納するような処理を書く
6. テストで動作確認
7. 1~6を親子関係になるコンポーネントの数だけ繰り返す。

もちろん、これは基本的な書き方であり、慣れれば相応に書いていくのだろうけれどもReactの考え方の基本としてはstateのイミュータビリティ(不変性)という考え方の1つとしてこのリフトアップという手法があるのだと思うので、
ちゃんと理解しておきたい

